// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  role          String    @default("user")
  banned        Boolean   @default(false)
  banReason     String?
  banExpires    Int? /// Unix timestamp for ban expiration
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  results       Result[]

  @@map("users")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  impersonatedBy String?
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("sessions")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("accounts")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verifications")
}

model Center {
  id          Int      @id @default(autoincrement())
  center_name String   @db.VarChar(50)
  center_code String   @unique @db.VarChar(12)
  results     Result[]
  schools     School[]
  createdAt   DateTime @default(now())

  @@map("centers")
}

model School {
  id          Int      @id @default(autoincrement())
  school_name String   @db.VarChar(50)
  school_code String   @unique @db.VarChar(12)
  results     Result[]
  center      Center   @relation(fields: [centerId], references: [id])
  centerId    Int
  createdAt   DateTime @default(now())

  @@map("schools")
}

model Result {
  id              String   @id @default(cuid())
  name            String   @db.VarChar(50)
  roll_number     String
  class           String
  total_attempt   Int
  correct_attempt Int
  total_score     Int
  center          Center   @relation(fields: [centerId], references: [id])
  centerId        Int
  school          School   @relation(fields: [schoolId], references: [id])
  schoolId        Int
  author          User     @relation(fields: [authorId], references: [id])
  authorId        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("results")
}
